/*

@title: 
@author: ThePangel
@tags: []
@addedOn: 2024-00-00
*/

const right_note_still = "h";
const left_note_still = "f";
const up_note_still = "t";
const down_note_still = "g";
const right_note = "r";
const left_note = "l";
const up_note = "u";
const down_note = "d";

const song = tune`
1000: E4-1000,
1000: F4-1000,
1000,
1000: B4-1000,
1000: B4-1000,
1000: E5-1000,
1000: G4-1000,
1000: E5-1000,
1000: G4-1000,
1000: E5-1000,
1000: A4-1000,
1000: E4-1000,
1000: D5-1000,
1000,
1000: G4-1000,
1000,
1000: E5-1000,
1000: G5-1000,
1000: E4-1000,
1000: D4-1000,
1000: G4-1000`;

setLegend([right_note, bitmap`
................
................
................
................
........3.......
........33......
.....333333.....
.....3333333....
.....333333.....
........33......
........3.......
................
................
................
................
................`],
  [left_note, bitmap`
................
................
................
................
.......5........
......55........
.....555555.....
....5555555.....
.....555555.....
......55........
.......5........
................
................
................
................
................`],
  [up_note, bitmap`
................
................
................
................
................
.......4........
......444.......
.....44444......
....4444444.....
......444.......
......444.......
......444.......
................
................
................
................`],
  [down_note, bitmap`
................
................
................
................
................
.......HHH......
.......HHH......
.......HHH......
.....HHHHHHH....
......HHHHH.....
.......HHH......
........H.......
................
................
................
................`],
  [right_note_still, bitmap`
................
................
................
.......000......
.......0.00.....
....0000..00....
....0......00...
....0.......0...
....0......00...
....0000..00....
.......0.00.....
.......000......
................
................
................
................`],
  [left_note_still, bitmap`
................
................
................
......000.......
.....00.0.......
....00..0000....
...00......0....
...0.......0....
...00......0....
....00..0000....
.....00.0.......
......000.......
................
................
................
................`],
  [up_note_still, bitmap`
................
................
................
................
......000.......
.....00.00......
....00...00.....
...00.....00....
...0.......0....
...000...000....
.....0...0......
.....0...0......
.....00000......
................
................
................`],
  [down_note_still, bitmap`
................
................
................
................
......00000.....
......0...0.....
......0...0.....
....000...000...
....0.......0...
....00.....00...
.....00...00....
......00.00.....
.......000......
................
................
................`], );


async function sleep(ms) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true)
    }, ms);
  });
}

let level = 0
const levels = [
  map`
ftgh
....
....
....
....
....
....`
]

setMap(levels[level])
split_song = song.split(',');
sprites = [right_note, left_note, up_note, down_note]
tempo = test[0];

async function spawnNote() {

  const randomSprite = sprites[Math.floor(Math.random() * sprites.length)];

  if (randomSprite === left_note) {
    addSprite(0, 6, left_note)
  }
  if (randomSprite === right_note) {
    addSprite(3, 6, right_note)
  }
  if (randomSprite === up_note) {
    addSprite(1, 6, up_note)
  }
  if (randomSprite === down_note) {
    addSprite(2, 6, down_note)
  }


}

async function game() {
  setTimeout(() => {
    playTune(song);
  }, 5.5 * tempo);
  for (i = 0; i < split_song.length; i++) {
    console.log(split_song[i]);
    if (/^\d+$/.test(split_song[i].replace("\n", ""))) {

      getAll().forEach(sprite => {
        sprite.y -= 1;
      });

      await sleep(tempo);

    } else {
      spawnNote();
      getAll().forEach(sprite => {
        sprite.y -= 1;
      });

      await sleep(tempo);

    }

  }
  for (i = 0; i < (5.5 * tempo) / 1000; i++) {
    getAll().forEach(sprite => {
      sprite.y -= 1;
    });

    await sleep(tempo);

  }




}

game();